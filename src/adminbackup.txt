import React, { useRef, useState, useEffect } from 'react';
import './App.css';

export const RalentiMenuAdmin = () => {
  const formRef = useRef(null);
  const [updateTrigger, setUpdateTrigger] = useState(0);

  const deleteRef = useRef(null);
  const updateRef = useRef(null);
  const updateRefMenu = useRef(null);

  const [showMenu, setShowMenu] = useState([]); //showmenu es un objeto con todo el contenido del menu, incluyendo categorias
  const [menu, setMenu] = useState([]);

  const fetchMenu = async () => {
    try {
      const response = await fetch('http://localhost:3000/categories');
      const data = await response.json();
      setShowMenu(data);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    fetchMenu();
  }, [updateTrigger]);

  useEffect(() => {
    setMenu(
      showMenu.map((element, index) => (
        <div className="menu-editor" key={index}>
          <div className="menu-editor__category">
            <h2>{element.name}</h2>
            <h2>{element.items.map((item, indexItem)=>{console.log(item.name)})}</h2>
        
            {element.items.map((item, itemIndex) => (
              <div className="menu-editor__menu-item" key={itemIndex}>
                <div className="menu-editor__image-container">
                  <img
                    className="item-image-mini"
                    src={require(`./images/${item.image}`)}
                    alt={item.name}

                  />
                  
                </div>
                <div className="menu-editor__item-details">
                  <h3 className="menu-editor__item-name">{item.name}</h3>
                  <p className="menu-editor__price">{item.price}</p>
                  <p className="menu-editor__description">{item.description}</p>
                </div>
                <div className="item-editor">
                  <input
                    type="text"
                    name={`menu-${index}-item-${itemIndex}`}
                    placeholder="Modificar nombre"
                  />
                  <button
                    onClick={() => {
                      updateItem(
                        formRef.current[`menu-${index}-item-${itemIndex}`].value,
                        item.id,
                        index
                      );
                    }}
                  >
                    Modificar elemento
                  </button>
                </div>
              </div>
            ))}

            <button
              ref={deleteRef}
              type="submit"
              onClick={() => {
                deleteCategory(element.id, index);
              }}
            >
              Eliminar categoría
            </button>
            <div className="item-editor">
              <input
                type="text"
                name={`menu-${index}`}
                placeholder="Modificar nombre de categoría"
              />
              <button
                ref={updateRef}
                type="submit"
                onClick={() => {
                  updateCategory(formRef.current[`menu-${index}`].value, element.id);
                }}
              >
                Modificar categoría
              </button>
            </div>
          </div>
        </div>
      ))
    );
  }, [showMenu, updateTrigger]);

  const postCategory = async (newData) => {
    await fetch('http://localhost:3000/categories', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        id: '',
        name: newData,
        items: []
      })
    });
  };

  const updateCategory = async (newData, categoryId) => {
    await fetch(`http://localhost:3000/categories/${categoryId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: newData
      })
    });
    setUpdateTrigger((prevTrigger) => prevTrigger + 1);
  };

  const deleteCategory = async (categoryId, categoryIndex) => {
    await fetch(`http://localhost:3000/categories/${categoryId}`, {
      method: 'DELETE'
    });
    setUpdateTrigger((prevTrigger) => prevTrigger + 1);
  };

  const updateItem = async (newName, itemId, categoryIndex) => {
    await fetch(`http://localhost:3000/items/${itemId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: newName
      })
    });
    setUpdateTrigger((prevTrigger) => prevTrigger + 1);
  };

  const addItem = async (newItem, categoryId) => {
    await fetch(`http://localhost:3000/categories/${categoryId}/items`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        id: '',
        name: newItem.name,
        price: newItem.price,
        description: newItem.description,
        image: newItem.image
      })
    });
    setUpdateTrigger((prevTrigger) => prevTrigger + 1);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const newCategory = formRef.current.newCategory.value;
    if (newCategory.trim() !== '') {
      postCategory(newCategory);
      setUpdateTrigger((prevTrigger) => prevTrigger + 1);
      formRef.current.reset();
    }
  };

  return (
    <div className="container">
      <h1>Administrar menú</h1>
      <form ref={formRef} onSubmit={handleSubmit}>
        <input type="text" name="newCategory" placeholder="Nueva categoría" />
        <button type="submit">Agregar categoría</button>
      </form>
      {menu}
    </div>
  );
};

export default RalentiMenuAdmin;
